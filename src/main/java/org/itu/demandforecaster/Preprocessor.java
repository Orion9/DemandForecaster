package org.itu.demandforecaster;

import org.apache.spark.SparkConf;
import org.apache.spark.ml.feature.OneHotEncoder;
import org.apache.spark.ml.feature.StringIndexer;
import org.apache.spark.ml.feature.VectorAssembler;
import org.apache.spark.sql.DataFrame;

/**
 * Created by Group 1.
 */

public class Preprocessor {
    /**
     * Attributes
     */

    // DataFrames generated by data files.
    protected DataFrame trainingData;
    protected DataFrame testData;

    // Objects for data preprocessing.
    public StringIndexer categoryIndexer;
    public OneHotEncoder dayOfWeekEncoder, categoryEncoder;
    public VectorAssembler vectorAssembler;

    /**
     * When a new object is derived, it sets up necessary indexers and encoders
     * according to the necessary columns. Basically, it extracts necessary
     * features for prediction model.
     */
    public Preprocessor(){
        categoryIndexer = new StringIndexer()
                .setInputCol("category")
                .setOutputCol("categoryIndex");

        dayOfWeekEncoder = new OneHotEncoder()
                .setInputCol("dayOfWeek")
                .setOutputCol("dayOfWeekVector");

        categoryEncoder = new OneHotEncoder()
                .setInputCol("categoryIndex")
                .setOutputCol("categoryVector");

        String[] cols = {"categoryVector", "dayOfWeekVector"};
        vectorAssembler = new VectorAssembler()
                .setInputCols(cols)
                .setOutputCol("features");
    }

    /**
     * Getters and setters.
     */

    public void loadTrainingData() {
        SparkConf sparkConf = Configuration.getSparkConfig().config;

    }

    public DataFrame getTrainingData() {
        return trainingData;
    }

    public void setTrainingData(DataFrame trainingData) {
        this.trainingData = trainingData;
    }

    public DataFrame getTestData() {
        return testData;
    }

    public void setTestData(DataFrame testData) {
        this.testData = testData;
    }
}
